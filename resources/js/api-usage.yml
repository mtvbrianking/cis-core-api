openapi: 3.0.1
info:
  title: CIS CORE API
  description: API usage documentation
  termsOfService: https://github.com/mtvbrianking/cis-core-api/blob/master/readme.md
  contact:
    url: https://github.com/mtvbrianking/cis-core-api
  version: 1.0.0
  x-logo: null
externalDocs:
  description: Source code documentation
  url: https://mtvbrianking.github.io/cis-core-api
servers:
- url: http://localhost:8000/v1
- url: https://localhost:8000/v1
tags:
- name: facility
- name: module
- name: permission
- name: role
- name: user
- name: oauth
paths:
  /facilities:
    get:
      tags:
      - facility
      summary: Get facilities
      description: Requires `view-any` permission on `facilities` module.
      operationId: getFacilities
      parameters:
      - name: paginate
        in: query
        schema:
          type: boolean
          default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_page:
                    type: integer
                    example: 1
                  data:
                    type: array
                    description: Facilities
                    items:
                      $ref: '#/components/schemas/FacilityModel'
                  first_page_url:
                    type: string
                    example: http://localhost:8000/api/v1/facilities?page=1
                  from:
                    type: integer
                    example: 1
                  last_page:
                    type: integer
                    example: 1
                  last_page_url:
                    type: integer
                  next_page_url:
                    type: string
                    example: null
                  path:
                    type: string
                    example: http://localhost:8000/api/v1/facilities
                  per_page:
                    type: integer
                    example: 10
                  prev_page_url:
                    type: string
                    example: null
                  to:
                    type: integer
                    example: 1
                  total:
                    type: integer
                    example: 1
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/facilities \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    post:
      tags:
      - facility
      summary: Create a facility
      description: Requires `create` permission on `facilities` module.
      operationId: createFacility
      requestBody:
        content:
          application/json:
            schema:
              required:
              - address
              - email
              - name
              type: object
              properties:
                name:
                  maxLength: 100
                  type: string
                  example: Mulago Hospital
                description:
                  maxLength: 100
                  type: string
                  example: National Referral Hospital
                address:
                  maxLength: 100
                  type: string
                  example: Mulago Hill, Kampala
                email:
                  maxLength: 50
                  type: string
                  format: email
                  example: cis@mulago.Hospital
                website:
                  maxLength: 50
                  type: string
                  format: url
                  example: https://mulago.Hospital
                phone:
                  maxLength: 25
                  pattern: ^\+(?:[0-9] ?){9,16}[0-9]$
                  type: string
                  format: tel
                  example: +256392741586
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X POST \
            http://localhost:8000/api/v1/facilities \
            -H 'Accept: application/json' \
            -H 'Authorization: Bearer {access-token}' \
            -H 'Content-Type: application/json' \
            -d '{
              "name": "Mulago Hospital",
              "description": "National Referral Hospital",
              "address": "Mulago Hill, Kampala",
              "email": "cis@mulago.Hospital",
              "website": "https://mulago.Hospital",
              "phone": "+256392741586"
            }'
      x-codegen-request-body-name: payload
  /facilities/datatables:
    get:
      tags:
      - facility
      summary: Get facilities (datatables)
      description: |-
        Requires `view-any` permission on `facilities` module.

        Get facilities formatted for jQuery datatables.
      operationId: getFacilitiesDatatables
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  draw:
                    type: integer
                    example: 1
                  recordsTotal:
                    type: integer
                    example: 1
                  recordsFiltered:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/facilities/datatables \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /facilities/{facility}:
    get:
      tags:
      - facility
      summary: Get facility
      description: |-
        Requires `view` permission on `facilities` module.

        A user can view their facility regardless.
      operationId: getFacility
      parameters:
      - name: facility
        in: path
        description: <a href="#operation/getFacilties">Facility ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/facilities/{facility} \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    put:
      tags:
      - facility
      summary: Update facility
      description: Requires `update` permission on `facilities` module.
      operationId: updateFacility
      parameters:
      - name: facility
        in: path
        description: <a href="#operation/getFacilties">Facility ID</a>
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              required:
              - address
              - email
              - name
              type: object
              properties:
                name:
                  maxLength: 100
                  type: string
                  example: Mulago Hospital
                description:
                  maxLength: 100
                  type: string
                  example: National Referral Hospital
                address:
                  maxLength: 100
                  type: string
                  example: Mulago Hill, Kampala
                email:
                  maxLength: 50
                  type: string
                  format: email
                  example: cis@mulago.Hospital
                website:
                  maxLength: 50
                  type: string
                  format: url
                  example: https://mulago.Hospital
                phone:
                  maxLength: 25
                  pattern: ^\+(?:[0-9] ?){9,16}[0-9]$
                  type: string
                  format: tel
                  example: +256392741586
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           http://localhost:8000/api/v1/facilities/{facility} \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}' \
           -H 'Content-Type: application/json' \
           -d '{
              "name": "Mulago Hospital",
              "description": "National Referral Hospital",
              "address": "Mulago Hill, Kampala",
              "email": "cis@mulago.Hospital",
              "website": "https://mulago.Hospital",
              "phone": "+256392741586"
            }'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - facility
      summary: Delete facility
      description: |-
        <strong>Permanently</strong> remove a facility from database.

        Requires `force-delete` permission on `facilities` module.

        The facility must be <a href='#operation/revokeFacility'>revoked</a> prior to deletion.
      operationId: deleteFacility
      parameters:
      - name: facility
        in: path
        description: <a href="#operation/getFacilities">Facility ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: No Content
          content: {}
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X DELETE \
           'http://localhost:8000/api/v1/facilities/{facility}' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /facilities/{facility}/modules:
    get:
      tags:
      - facility
      summary: Get modules granted to a facility.
      description: Requires `view-any` permission on `modules` module.
      operationId: getFacilityModules
      parameters:
      - name: facility
        in: path
        description: <a href="#operation/getFacilities">Facility ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  FacilityModel:
                    $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           'http://localhost:8000/api/v1/facilities/{facility}/modules' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /facilities/{facility}/modules/available:
    get:
      tags:
      - facility
      summary: Get modules available to a facility.
      description: |-
        Requires `assign-modules` permission on `permissions` module.

        Gives all modules available to a facility indicating whether that module is granted to the facility or not.
      operationId: getFacilityModulesAvailable
      parameters:
      - name: facility
        in: path
        description: <a href="#operation/getFacilities">Facility ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  FacilityModel:
                    $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           'http://localhost:8000/api/v1/facilities/{facility}/modules/available' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    put:
      tags:
      - facility
      summary: Reassign modules granted to a facility
      description: Requires `assign-modules` permission on `modules` module.
      operationId: assignFacilityModules
      parameters:
      - name: facility
        in: path
        description: <a href="#operation/getFacilities">Facility ID</a>
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              required:
              - modules
              type: object
              properties:
                modules:
                  type: array
                  description: <a href="#operation/getModules">Module name</a>
                  items:
                    type: string
                    example: users
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  FacilityModel:
                    $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/facilities/{facility}/modules/available' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}
           -d '{
              "modules": [
                "users"
              ]
            }
      x-codegen-request-body-name: payload
  /facilities/{facility}/restore:
    put:
      tags:
      - facility
      summary: Restore facility
      description: |-
        <strong>Reinstate</strong> previously <strike><a href='#operation/revokeFacility'>revoked</a></strike> facility.

        Requires `restore` permission on `facilities` module.
      operationId: restoreFacility
      parameters:
      - name: facility
        in: path
        description: <a href="#operation/getFacilties">Facility ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/facilities/{facility}/restore' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /facilities/{facility}/revoke:
    put:
      tags:
      - facility
      summary: Revoke facility
      description: |-
        Requires `soft-delete` permission on `facilities` module.

        Different from <a href='#operation/deleteFacility'>delete facility</a>.
      operationId: revokeFacility
      parameters:
      - name: facility
        in: path
        description: <a href="#operation/getFacilities">Facility ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  FacilityModel:
                    $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/facilities/{facility}/revoke' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /facilities/{facility}/roles:
    get:
      tags:
      - facility
      summary: Get roles belonging to a facility.
      description: Requires `view-any` permission on `roles` module.
      operationId: getFacilityRoles
      parameters:
      - name: facility
        in: path
        description: <a href="#operation/getFacilities">Facility ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  FacilityModel:
                    $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           'http://localhost:8000/api/v1/facilities/{facility}/roles' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /facilities/{facility}/users:
    get:
      tags:
      - facility
      summary: Get users belonging to a facility.
      description: Requires `view-any` permission on `users` module.
      operationId: getFacilityUsers
      parameters:
      - name: facility
        in: path
        description: <a href="#operation/getFacilities">Facility ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  FacilityModel:
                    $ref: '#/components/schemas/FacilityModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           'http://localhost:8000/api/v1/facilities/{facility}/users' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /modules:
    get:
      tags:
      - module
      summary: Get modules
      description: Requires `view-any` permission on `modules` module.
      operationId: getModules
      parameters:
      - name: paginate
        in: query
        schema:
          type: boolean
          default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_page:
                    type: integer
                    example: 1
                  data:
                    type: array
                    description: Modules
                    items:
                      $ref: '#/components/schemas/ModuleModel'
                  first_page_url:
                    type: string
                    example: http://localhost:8000/api/v1/modules?page=1
                  from:
                    type: integer
                    example: 1
                  last_page:
                    type: integer
                    example: 1
                  last_page_url:
                    type: integer
                  next_page_url:
                    type: string
                    example: null
                  path:
                    type: string
                    example: http://localhost:8000/api/v1/modules
                  per_page:
                    type: integer
                    example: 10
                  prev_page_url:
                    type: string
                    example: null
                  to:
                    type: integer
                    example: 1
                  total:
                    type: integer
                    example: 1
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/modules \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    post:
      tags:
      - module
      summary: Create a module
      description: Requires `create` permission on `modules` module.
      operationId: createModule
      requestBody:
        content:
          application/json:
            schema:
              required:
              - name
              type: object
              properties:
                name:
                  maxLength: 25
                  type: string
                  example: users
                category:
                  type: string
                  enum:
                  - uncategorized
                description:
                  maxLength: 100
                  type: string
                  example: Users module
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X POST \
            http://localhost:8000/api/v1/modules \
            -H 'Accept: application/json' \
            -H 'Authorization: Bearer {access-token}' \
            -H 'Content-Type: application/json' \
            -d '{
              "name":"users",
              "description":"Users module"
            }'
      x-codegen-request-body-name: payload
  /modules/datatables:
    get:
      tags:
      - module
      summary: Get modules (datatables)
      description: |-
        Requires `view-any` permission on `modules` module.

        Get modules formatted for jQuery datatables.
      operationId: getModulesDatatables
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  draw:
                    type: integer
                    example: 1
                  recordsTotal:
                    type: integer
                    example: 1
                  recordsFiltered:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModuleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/modules/datatables \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /modules/{module}:
    get:
      tags:
      - module
      summary: Get module
      description: Requires `view` permission on `modules` module.
      operationId: getModule
      parameters:
      - name: module
        in: path
        description: <a href="#operation/getModules">Module name</a>
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/modules/{module} \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    put:
      tags:
      - module
      summary: Update module
      description: Requires `update` permission on `modules` module.
      operationId: updateModule
      parameters:
      - name: module
        in: path
        description: <a href="#operation/getModules">Module name</a>
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  example: administration
                  enum:
                  - uncategorized
                  - administration
                description:
                  maxLength: 100
                  type: string
                  example: User accounts' management module
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ModuleModel:
                    $ref: '#/components/schemas/ModuleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           http://localhost:8000/api/v1/modules/{module} \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}' \
           -H 'Content-Type: application/json' \
           -d '{
             "category": "administration",
             "description":"User accounts' management module"
           }'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - module
      summary: Delete module
      description: |-
        <strong>Permanently</strong> remove a module from database.

        Requires `force-delete` permission on `modules` module.

        The module must be <a href='#operation/revokeModule'>revoked</a> before it can be deleted.
      operationId: deleteModule
      parameters:
      - name: module
        in: path
        description: <a href="#operation/getModules">Module name</a>
        required: true
        schema:
          type: string
      responses:
        204:
          description: No Content
          content: {}
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X DELETE \
           'http://localhost:8000/api/v1/modules/{module}' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /modules/{module}/facilities:
    get:
      tags:
      - module
      summary: Get facilities granted to a module.
      description: Requires `view-any` permission on `facilities` module.
      operationId: getModuleFacilities
      parameters:
      - name: module
        in: path
        description: <a href="#operation/getModules">Module name</a>
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ModuleModel:
                    $ref: '#/components/schemas/ModuleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           'http://localhost:8000/api/v1/modules/{module}/facilities' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /modules/{module}/permissions:
    get:
      tags:
      - module
      summary: Get permissions belonging to a module.
      description: Requires `view-any` permission on `permissions` module.
      operationId: getModulePermissions
      parameters:
      - name: module
        in: path
        description: <a href="#operation/getModules">Module name</a>
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ModuleModel:
                    $ref: '#/components/schemas/ModuleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           'http://localhost:8000/api/v1/modules/{module}/permissions' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /modules/{module}/restore:
    put:
      tags:
      - module
      summary: Restore module
      description: |-
        <strong>Reinstate</strong> previously <strike>revoked</strike> module.

        Requires `restore` permission on `modules` module.

        See <a href='#operation/revokeModule'>revoke module</a>.
      operationId: restoreModule
      parameters:
      - name: module
        in: path
        description: <a href="#operation/getModules">Module name</a>
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/modules/{module}/restore' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /modules/{module}/revoke:
    put:
      tags:
      - module
      summary: Revoke module
      description: |-
        Requires `soft-delete` permission on `modules` module.

        Different from <a href='#operation/deleteModule'>delete module</a>.
      operationId: revokeModule
      parameters:
      - name: module
        in: path
        description: <a href="#operation/getModules">Module name</a>
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ModuleModel:
                    $ref: '#/components/schemas/ModuleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/modules/{module}/revoke' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /permissions:
    get:
      tags:
      - permission
      summary: Get permissions
      description: Requires `view-any` permission on `permissions` module.
      operationId: getPermissions
      parameters:
      - name: paginate
        in: query
        schema:
          type: boolean
          default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_page:
                    type: integer
                    example: 1
                  data:
                    type: array
                    description: Permissions
                    items:
                      $ref: '#/components/schemas/PermissionModel'
                  first_page_url:
                    type: string
                    example: http://localhost:8000/api/v1/permissions?page=1
                  from:
                    type: integer
                    example: 1
                  last_page:
                    type: integer
                    example: 1
                  last_page_url:
                    type: integer
                  next_page_url:
                    type: string
                    example: null
                  path:
                    type: string
                    example: http://localhost:8000/api/v1/permissions
                  per_page:
                    type: integer
                    example: 10
                  prev_page_url:
                    type: string
                    example: null
                  to:
                    type: integer
                    example: 1
                  total:
                    type: integer
                    example: 1
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/permissions \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    post:
      tags:
      - permission
      summary: Register permission
      description: Requires `create` permission on `permissions` module.
      operationId: registerPermission
      requestBody:
        content:
          application/json:
            schema:
              required:
              - module_name
              - name
              type: object
              properties:
                module_name:
                  type: string
                  description: <a href="#operation/getModules">Module name</a>
                  example: users
                name:
                  maxLength: 25
                  type: string
                  example: view-any
                description:
                  maxLength: 100
                  type: string
                  example: View any user
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  PermissionModel:
                    $ref: '#/components/schemas/PermissionModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X POST \
            http://localhost:8000/api/v1/permissions \
            -H 'Accept: application/json' \
            -H 'Authorization: Bearer {access-token}' \
            -H 'Content-Type: application/json' \
            -d '{
              "module_name":"users",
              "name":"view-any",
              "description":"View any users."
            }'
      x-codegen-request-body-name: payload
  /permissions/datatables:
    get:
      tags:
      - permission
      summary: Get permissions (datatables)
      description: |-
        Requires `view-any` permission on `permissions` module.

        Get permissions formatted for jQuery datatables.
      operationId: getPermissionsDatatables
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  draw:
                    type: integer
                    example: 1
                  recordsTotal:
                    type: integer
                    example: 1
                  recordsFiltered:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PermissionModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/permissions/datatables \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /permissions/{permission}:
    get:
      tags:
      - permission
      summary: Get permission
      description: Requires `view` permission on `permissions` module.
      operationId: getPermission
      parameters:
      - name: permission
        in: path
        description: <a href="#operation/getPermissions">Permission ID</a>
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  PermissionModel:
                    $ref: '#/components/schemas/PermissionModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/permissions/{permission} \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    put:
      tags:
      - permission
      summary: Update permission
      description: Requires `update` permission on `permissions` module.
      operationId: updatePermission
      parameters:
      - name: permission
        in: path
        description: <a href="#operation/getPermissions">Permission ID</a>
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                module_name:
                  type: string
                  description: <a href="#operation/getModules">Module name</a>
                  example: users
                name:
                  maxLength: 25
                  type: string
                  example: view-any
                description:
                  maxLength: 100
                  type: string
                  example: View any user
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  PermissionModel:
                    $ref: '#/components/schemas/PermissionModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           http://localhost:8000/api/v1/permissions/{permission} \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}' \
           -H 'Content-Type: application/json' \
           -d '{
             "module_name":"users",
             "name":"view-any",
             "description":"View any user."
           }'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - permission
      summary: Delete permission
      description: |-
        Remove permission from database. This action irreversible.

        Requires `delete` permission on `permissions` module.
      operationId: deletePermission
      parameters:
      - name: permission
        in: path
        description: <a href="#operation/getPermissions">Permission ID</a>
        required: true
        schema:
          type: integer
      responses:
        204:
          description: No Content
          content: {}
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X DELETE \
           'http://localhost:8000/api/v1/permissions/{permission}' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /permissions/{permission}/roles:
    get:
      tags:
      - permission
      summary: Get roles granted this permission.
      description: Requires `view-any` permission on `roles` permission.
      operationId: getPermissionRoles
      parameters:
      - name: permission
        in: path
        description: <a href="#operation/getPermissions">Permission ID</a>
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  PermissionModel:
                    $ref: '#/components/schemas/PermissionModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           'http://localhost:8000/api/v1/permissions/{permission}/roles' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /roles:
    get:
      tags:
      - role
      summary: Get roles
      description: Requires `view-any` permission on `roles` module.
      operationId: getRoles
      parameters:
      - name: paginate
        in: query
        schema:
          type: boolean
          default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_page:
                    type: integer
                    example: 1
                  data:
                    type: array
                    description: Roles
                    items:
                      $ref: '#/components/schemas/RoleModel'
                  first_page_url:
                    type: string
                    example: http://localhost:8000/api/v1/roles?page=1
                  from:
                    type: integer
                    example: 1
                  last_page:
                    type: integer
                    example: 1
                  last_page_url:
                    type: integer
                  next_page_url:
                    type: string
                    example: null
                  path:
                    type: string
                    example: http://localhost:8000/api/v1/roles
                  per_page:
                    type: integer
                    example: 10
                  prev_page_url:
                    type: string
                    example: null
                  to:
                    type: integer
                    example: 1
                  total:
                    type: integer
                    example: 1
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/roles \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    post:
      tags:
      - role
      summary: Register role
      description: Requires `create` permission on `roles` module.
      operationId: registerRole
      requestBody:
        content:
          application/json:
            schema:
              required:
              - name
              type: object
              properties:
                name:
                  maxLength: 50
                  type: string
                  example: Sys Admin
                description:
                  maxLength: 100
                  type: string
                  example: System Administrator
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  RoleModel:
                    $ref: '#/components/schemas/RoleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X POST \
            http://localhost:8000/api/v1/roles \
            -H 'Accept: application/json' \
            -H 'Authorization: Bearer {access-token}' \
            -H 'Content-Type: application/json' \
            -d '{
              "name":"Sys Admin",
              "description":"System Administrator"
            }'
      x-codegen-request-body-name: payload
  /roles/datatables:
    get:
      tags:
      - role
      summary: Get roles (datatables)
      description: |-
        Requires `view-any` permission on `roles` module.

        Get roles formatted for jQuery datatables.
      operationId: getRolesDatatables
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  draw:
                    type: integer
                    example: 1
                  recordsTotal:
                    type: integer
                    example: 1
                  recordsFiltered:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/roles/datatables \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /roles/{role}:
    get:
      tags:
      - role
      summary: Get role
      description: |-
        Requires `view` permission on `roles` module to view other user's roles.

        User's can view role regardless.
      operationId: getRole
      parameters:
      - name: role
        in: path
        description: <a href="#operation/getRoles">Role ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  RoleModel:
                    $ref: '#/components/schemas/RoleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/roles/{role} \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    put:
      tags:
      - role
      summary: Update role
      description: Requires `update` permission on `roles` module.
      operationId: updateRole
      parameters:
      - name: role
        in: path
        description: <a href="#operation/getRoles">Role ID</a>
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - name
              type: object
              properties:
                name:
                  maxLength: 50
                  type: string
                  example: Sys Admin
                description:
                  maxLength: 100
                  type: string
                  example: System Administrator
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  RoleModel:
                    $ref: '#/components/schemas/RoleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           http://localhost:8000/api/v1/roles/{role} \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}' \
           -H 'Content-Type: application/json' \
           -d '{
             "name":"Sys Admin",
             "description":"System Administrator"
           }'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - role
      summary: Delete role
      description: |-
        <strong>Permanently</strong> remove role from database.

        Requires `force-delete` permission on `roles` module.

        The role must be <a href='#operation/revokeRole'>revoked</a> before it be deleted.
      operationId: deleteRole
      parameters:
      - name: role
        in: path
        description: <a href="#operation/getRoles">Role ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: No Content
          content: {}
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X DELETE \
           'http://localhost:8000/api/v1/roles/{role}' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /roles/{role}/permissions:
    get:
      tags:
      - role
      summary: Get granted permissions
      description: |-
        Get only permissions granted to this role.

        Requires `view-any` permission on `permissions` module.
      operationId: getRolePermissions
      parameters:
      - name: role
        in: path
        description: <a href="#operation/getRoles">Role ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  RoleModel:
                    $ref: '#/components/schemas/RoleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/roles/{role}/permissions \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /roles/{role}/permissions/available:
    get:
      tags:
      - role
      summary: Get available permissions
      description: |-
        Get all permissions available to this role; granted or not.

        Requires `assign-permissions` permission on `roles` module.

        A user can still access permissions granted to their role regardless.
      operationId: getRolePermissionsAvailable
      parameters:
      - name: role
        in: path
        description: <a href="#operation/getRoles">Role ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  RoleModel:
                    $ref: '#/components/schemas/RoleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/roles/{role}/permissions/available \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    put:
      tags:
      - role
      summary: Sync available permissions
      description: |-
        Dettach, re-attach permissions to a role.

        Requires `assign-permissions` permission on `permissions` module.
      operationId: syncRolePermissionsAvailable
      parameters:
      - name: role
        in: path
        description: <a href="#operation/getRoles">Role ID</a>
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              required:
              - permissions
              type: object
              properties:
                permissions:
                  type: array
                  description: <a href="#operation/getPermissions">Permission ID</a>
                  items:
                    type: integer
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  RoleModel:
                    $ref: '#/components/schemas/RoleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           http://localhost:8000/api/v1/roles/{role}/permissions/available \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}' \
           -d '{
              "permissions": [
                1
              ]
            }'
      x-codegen-request-body-name: payload
  /roles/{role}/revoke:
    put:
      tags:
      - role
      summary: Revoke role
      description: |-
        Requires `soft-delete` permission on `roles` module.

        Different from <a href='#operation/deleteRole'>delete role</a>.
      operationId: revokeRole
      parameters:
      - name: role
        in: path
        description: <a href="#operation/getRoles">Role ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  RoleModel:
                    $ref: '#/components/schemas/RoleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/roles/{role}/revoke' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /roles/{role}/restore:
    put:
      tags:
      - role
      summary: Restore role
      description: |-
        <strong>Reinstate</strong> previously <strike>revoked</strike> role.

        Requires `restore` permission on `roles` module.

        See <a href='#operation/revokeUser'>revoke role</a>.
      operationId: restoreRole
      parameters:
      - name: role
        in: path
        description: <a href="#operation/getRoles">Role ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  RoleModel:
                    $ref: '#/components/schemas/RoleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/roles/{role}/restore' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /roles/{role}/users:
    get:
      tags:
      - role
      summary: Get role users
      description: |-
        Get all users having this role.

        Requires `view-any` permission on `users` module.
      operationId: getRoleUsers
      parameters:
      - name: role
        in: path
        description: <a href="#operation/getRoles">Role ID</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  RoleModel:
                    $ref: '#/components/schemas/RoleModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/roles/{role}/users' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /users:
    get:
      tags:
      - user
      summary: Get users
      description: Requires `view-any` permission on `users` module.
      operationId: getUsers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/users \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    post:
      tags:
      - user
      summary: Register user
      description: |-
        Requires `create` permission on `users` module.

        Sets a random default password; see <a href='#operation/resetPassword'>reset password</a>.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              required:
              - alias
              - email
              - name
              - role_id
              type: object
              properties:
                name:
                  maxLength: 50
                  type: string
                  description: Full name
                  example: John Doe
                alias:
                  maxLength: 50
                  type: string
                  description: Preferred display name
                  example: jdoe
                email:
                  maxLength: 100
                  type: string
                  description: Email address. Must be unique. See <a href='#operation/validateEmail">validate
                    email.</a>
                  format: email
                  example: jdoe@example.com
                role_id:
                  type: string
                  description: <a href="#operation/getRoles">Role ID</a>
                  format: uuid
                  example: 1bc27b9c-a963-4fda-b79b-91b125ba0ed1
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserModel:
                    $ref: '#/components/schemas/UserModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X POST \
            http://localhost:8000/api/v1/users \
            -H 'Accept: application/json' \
            -H 'Authorization: Bearer {access-token}' \
            -H 'Content-Type: application/json' \
            -d '{
              "name":"John Doe",
              "alias":"jdoe",
              "email":"jdoe@example.com",
              "role_id":"1bc27b9c-a963-4fda-b79b-91b125ba0ed1"
            }'
      x-codegen-request-body-name: payload
  /users/auth:
    post:
      tags:
      - user
      summary: Authenticate user
      description: Requires `authenticate-user` scope.
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              required:
              - email
              - password
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: jdoe@example.com
                password:
                  type: string
                  example: Gm%Pm5^(
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserModel:
                    $ref: '#/components/schemas/UserModel'
      security:
      - password_grant:
        - authenticate-user
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X POST \
            http://localhost:8000/api/v1/users/auth \
            -H 'Accept: application/json' \
            -H 'Authorization: Bearer {access-token}' \
            -H 'Content-Type: application/json' \
            -d '{
              "email": "jdoe@example.com",
              "password": "Gm%Pm5^("
            }'
      x-codegen-request-body-name: payload
  /users/deauth:
    post:
      tags:
      - user
      summary: Deauthenticate user
      description: |-
        Invalidates existing user tokens to calling client app.

        Requires `authenticate-user` scope.
      operationId: deauthenticateUser
      responses:
        204:
          description: No Content
          content: {}
      security:
      - password_grant:
        - authenticate-user
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X POST \
            http://localhost:8000/api/v1/users/deauth \
            -H 'Accept: application/json' \
            -H 'Authorization: Bearer {access-token}'
  /users/email:
    put:
      tags:
      - user
      summary: Confirm email verification
      description: |-
        Confirm a user has verified their email address.

        Requires `confirm-email` scope.
      operationId: confirmEmailVerification
      requestBody:
        content:
          application/json:
            schema:
              required:
              - email
              type: object
              properties:
                email:
                  type: string
                  description: Verified email address.
                  format: email
                  example: jdoe@example.com
        required: false
      responses:
        204:
          description: No Content
          content: {}
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/users/email' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}' \
           -d '{
              "email": "jdoe@example.com"
            }'
      x-codegen-request-body-name: payload
    post:
      tags:
      - user
      summary: Validate email
      description: |-
        Check if a user exists with given email.

        Requires `validate-email` scope.
      operationId: validateEmail
      requestBody:
        content:
          application/json:
            schema:
              required:
              - email
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: jdoe@example.com
        required: false
      responses:
        204:
          description: No Content
          content: {}
      security:
      - password_grant:
        - validate-email
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X POST \
            http://localhost:8000/api/v1/users/email \
            -H 'Accept: application/json' \
            -H 'Authorization: Bearer {access-token}' \
            -H 'Content-Type: application/json' \
            -d '{
              "email": "jdoe@example.com"
            }'
      x-codegen-request-body-name: payload
  /users/password:
    put:
      tags:
      - user
      summary: Update password
      description: |-
        Update your <strong>own</strong> password.

        \* This will invalidate all existing user access tokens.

        See <a href='#operation/resetPassword'>reset password</a>.
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema:
              required:
              - new_password
              - new_password_confirmation
              - password
              type: object
              properties:
                password:
                  type: string
                  description: Existing user account password.
                  example: N%x/6j^H
                new_password:
                  pattern: (?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$
                  type: string
                  description: |-
                    New user account password. Having at least;
                    + 8 characters,
                    + an upper case letter,
                    + a lower case letter,
                    + a number and,
                    + a symbol.
                  example: Gm=Pm5^(
                new_password_confirmation:
                  type: string
                  description: New password confirmation.
                  example: Gm=Pm5^(
        required: false
      responses:
        204:
          description: No Content
          content: {}
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/users/password' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}' \
           -d '{
              "password":"N:x/6j^H",
              "new_password":"Gm=Pm5^(",
              "new_password_confirmation":"Gm=Pm5^(",
            }'
      x-codegen-request-body-name: payload
    post:
      tags:
      - user
      summary: Confirm password
      description: Confirm your <strong>own</strong> password.
      operationId: confirmPassword
      requestBody:
        content:
          application/json:
            schema:
              required:
              - password
              type: object
              properties:
                password:
                  type: string
                  description: User account password.
                  example: N%x/6j^H
        required: false
      responses:
        204:
          description: No Content
          content: {}
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X POST \
           'http://localhost:8000/api/v1/users/password' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}' \
           -d '{
             "password":"N%x/6j^H"
           }'
      x-codegen-request-body-name: payload
  /users/password/reset:
    put:
      tags:
      - user
      summary: Reset password
      description: |-
        Reset password on behalf of the user.

        Requires `reset-password` scope.

        \* This will invalidate all existing user access tokens.

        See <a href='#operation/updatePassword'>update password</a>.
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              required:
              - email
              - password
              - password_confirmation
              type: object
              properties:
                email:
                  type: string
                  description: Email for account to reset passport.
                  format: email
                  example: jdoe@example.com
                email_verified_at:
                  type: string
                  description: |-
                    When a user verified their email.

                    Normally, if password reset was via email, the email is verified implicitly.
                  format: date-time
                password:
                  pattern: (?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$
                  type: string
                  description: |-
                    New user account password. Having at least;
                    + 8 characters,
                    + an upper case letter,
                    + a lower case letter,
                    + a number and,
                    + a symbol.
                  example: Gm=Pm5^(
                password_confirmation:
                  type: string
                  description: Password confirmation.
                  example: Gm=Pm5^(
        required: false
      responses:
        204:
          description: No Content
          content: {}
      security:
      - password_grant:
        - reset-password
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/users/password/reset' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}' \
           -d '{
              "email":"jdoe@example.com",
              "password":"Gm%Pm5^(",
              "password_confirmation":"Gm%Pm5^("
            }'
      x-codegen-request-body-name: payload
  /users/{user}:
    get:
      tags:
      - user
      summary: Get user
      description: |-
        Requires `view` permission on `users` module.

        User's can view their own regardless.
      operationId: getUser
      parameters:
      - name: user
        in: path
        description: <a href="#operation/getUsers">User</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserModel:
                    $ref: '#/components/schemas/UserModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X GET \
           http://localhost:8000/api/v1/users/{user} \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
    put:
      tags:
      - user
      summary: Update user
      description: |-
        Requires `update` permission on `users` module.

        Can't update a user's password. See <a href='#operation/updatePassword'>update user password</a>
      operationId: updateUser
      parameters:
      - name: user
        in: path
        description: <a href="#operation/getUsers">User</a>
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  maxLength: 50
                  type: string
                  description: Full name
                  example: John Doe
                alias:
                  maxLength: 50
                  type: string
                  description: Preferred display name
                  example: jdoe
                email:
                  maxLength: 100
                  type: string
                  description: |-
                    Email address.\
                    If changed, user must verify new email address.
                    See <a href='#operation/confirmEmailVerification'>confirm email verification.</a>
                  format: email
                  example: jdoe@example.com
                role_id:
                  type: string
                  description: <a href="#operation/getRoles">Role ID</a>
                  format: uuid
                  example: 1bc27b9c-a963-4fda-b79b-91b125ba0ed1
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserModel:
                    $ref: '#/components/schemas/UserModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           http://localhost:8000/api/v1/users/{user} \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}' \
           -H 'Content-Type: application/json' \
           -d '{
              "name":"John Doe",
              "alias":"jdoe",
              "email":"jdoe@example.com",
              "role_id":"{role}"
            }'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - user
      summary: Delete user
      description: |-
        <strong>Permanently</strong> remove user from database.

        Requires `force-delete` permission on `users` module, and the user must be revoked before he/she can be deleted.

        See <a href='#operation/revokeUser'>revoke user</a>
      operationId: deleteUser
      parameters:
      - name: user
        in: path
        description: <a href="#operation/getUsers">User</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: No Content
          content: {}
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X DELETE \
           'http://localhost:8000/api/v1/users/{user}' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /users/{user}/revoke:
    put:
      tags:
      - user
      summary: Revoke user
      description: |-
        Requires `soft-delete` permission on `users` module.

        Different from <a href='#operation/deleteUser'>delete user</a>.
      operationId: revokeUser
      parameters:
      - name: user
        in: path
        description: <a href="#operation/getUsers">User</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserModel:
                    $ref: '#/components/schemas/UserModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/users/{user}/revoke' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /users/{user}/restore:
    put:
      tags:
      - user
      summary: Restore user
      description: |-
        <strong>Reinstate</strong> previously <strike>revoked</strike> user.

        Requires `restore` permission on `users` module.

        See <a href='#operation/revokeUser'>revoke user</a>.
      operationId: restoreUser
      parameters:
      - name: user
        in: path
        description: <a href="#operation/getUsers">User</a>
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserModel:
                    $ref: '#/components/schemas/UserModel'
      x-code-samples:
      - lang: CURL
        source: |-
          curl -X PUT \
           'http://localhost:8000/api/v1/users/{user}/restore' \
           -H 'Accept: application/json' \
           -H 'Authorization: Bearer {access-token}'
  /oauth/token:
    post:
      tags:
      - oauth
      summary: Request oauth token
      operationId: requestToken
      requestBody:
        content:
          application/json:
            schema:
              required:
              - client_id
              - client_secret
              - grant_type
              type: object
              properties:
                client_id:
                  type: string
                  format: UUID
                client_secret:
                  type: string
                grant_type:
                  type: string
                  enum:
                  - authorization_code
                  - client_credentials
                  - password
                  - refresh_token
                code:
                  type: string
                  description: |-
                    Authorization code.

                    <strong>Required if</strong> grant_type is `authorization_code`.
                redirect_uri:
                  type: string
                  description: <strong>Required if</strong> grant_type is `authorization_code`.
                  format: URI
                refresh_token:
                  type: string
                  description: |-
                    Refresh access-token.

                    <strong>Required if</strong> grant_type is `refresh_token`.
                username:
                  type: string
                  description: <strong>Required if</strong> grant_type is `password`.
                password:
                  type: string
                  description: <strong>Required if</strong> grant_type is `password`.
                  format: password
                scopes:
                  type: array
                  items:
                    type: string
        required: false
      responses:
        200:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenModel'
      x-code-samples:
      - lang: CURL - Password
        source: |-
          curl -X POST \
           http://localhost:8000/api/v1/oauth/token \
           -H 'Accept: application/json' \
           -H 'Content-Type: application/json' \
           -d '{
              "grant_type": "password",
              "client_id": "3102c90b-1936-4968-af9e-3701bcc6147c",
              "client_secret": "OZHF4AuWWvMY0rKC2VWwEMlvobJ4GfCgGKopdadQ",
              "username": "jdoe@example.com",
              "password": "O7SQx63Y12iwaWHQ"
           }'
      - lang: CURL - Client Credentials
        source: |-
          curl -X POST \
           http://localhost:8000/api/v1/oauth/token \
           -H 'Accept: application/json' \
           -H 'Content-Type: application/json' \
           -d '{
              "grant_type": "client_credentials",
              "client_id": "3102c90b-1936-4968-af9e-3701bcc6147c",
              "client_secret": "OZHF4AuWWvMY0rKC2VWwEMlvobJ4GfCgGKopdadQ"
           }'
      x-codegen-request-body-name: payload
components:
  schemas:
    UserModel:
      title: User
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 0ac99f1b-482c-4af1-be28-ddace07eff20
        facility_id:
          type: string
          description: <a href="#operation/getFacilities">Facility ID</a>
          format: uuid
          example: 90cae4ff-6f86-4ba3-8651-134b48fd7a2a
        role_id:
          type: string
          description: <a href="#operation/getRoles">Role ID</a>
          format: uuid
          example: f0f95c23-6ba1-4348-b1d9-bfb5e4bb1e3f
        alias:
          maxLength: 25
          type: string
          description: Display name - unique.
          example: jdoe
        name:
          maxLength: 25
          type: string
          description: Full name
          example: John Doe
        email:
          type: string
          description: Email address - unique.
          format: email
          example: jdoe@example.com
        email_verified_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
    RoleModel:
      title: Role
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: f0f95c23-6ba1-4348-b1d9-bfb5e4bb1e3f
        facility_id:
          type: string
          description: <a href="#operation/getFacilities">Facility ID</a>
          format: uuid
          example: 0ac99f1b-482c-4af1-be28-ddace07eff20
        name:
          maxLength: 50
          type: string
          example: Sys Admin
        description:
          maxLength: 100
          type: string
          nullable: true
          example: System Administrator
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
    FacilityModel:
      title: Facility
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 90cae4ff-6f86-4ba3-8651-134b48fd7a2a
        name:
          maxLength: 100
          type: string
          example: Mulago Hospital
        description:
          maxLength: 100
          type: string
          nullable: true
          example: National Referral Hospital
        address:
          maxLength: 100
          type: string
          example: Mulago Hill, Kampala
        email:
          maxLength: 50
          type: string
          format: email
          example: cis@mulago.Hospital
        website:
          maxLength: 50
          type: string
          format: uri
          nullable: true
          example: https://mulago.Hospital
        phone:
          maxLength: 25
          pattern: ^\+(?:[0-9] ?){9,16}[0-9]$
          type: string
          format: tel
          nullable: true
          example: +256392741586
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
    ModuleModel:
      title: Module
      type: object
      properties:
        name:
          maxLength: 100
          type: string
          example: users
        category:
          type: string
          enum:
          - uncategorized
        description:
          maxLength: 50
          type: string
          nullable: true
          example: Users module
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
    PermissionModel:
      title: Permission
      type: object
      properties:
        id:
          type: integer
          example: 1
        module_name:
          maxLength: 100
          type: string
          example: users
        name:
          maxLength: 100
          type: string
          format: uuid
        description:
          maxLength: 100
          type: string
          nullable: true
          example: View any user
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    TokenModel:
      title: Token
      type: object
      properties:
        token_type:
          type: string
          default: Bearer
        expires_in:
          type: integer
          example: 3600
        access_token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGcNGY4ODNhMzRmMTM0NTdmMTkyMGNlY...
        refresh_token:
          type: string
          description: \* Missing on client-credentials token.
          nullable: true
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6Ijk4OGM1...
    UserValidateEmailRequest:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: Email address
          format: email
          example: jdoe@example.com
    401HttpResponse:
      type: object
      properties:
        message:
          type: string
          example: Unauthenticated.
    403HttpResponse:
      type: object
      properties:
        message:
          type: string
          example: Insufficient permission.
    404HttpResponse:
      type: object
      properties:
        message:
          type: string
          example: Not found.
    405HttpResponse:
      type: object
      properties:
        message:
          type: string
          example: The POST method is not supported for this route.
    422HttpResponse:
      type: object
      properties:
        message:
          type: string
          example: The given data was invalid.
        errors:
          type: object
          properties:
            email:
              type: array
              items:
                type: string
                example: The email field is required.
    429HttpResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Exceeded API request rate limit. Default: throttle:60,1'
    500HttpResponse:
      type: object
      properties:
        message:
          type: string
          example: Something went wrong.
  securitySchemes:
    client_credentials_grant:
      type: oauth2
      description: Get access to data while protecting your account credentials.
      flows:
        clientCredentials:
          tokenUrl: http://localhost:8000/api/v1/oauth/token
          scopes: {}
    authorization_code_grant:
      type: oauth2
      description: Get access to data while protecting your account credentials.
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8000/api/v1/oauth/authorize
          tokenUrl: http://localhost:8000/api/v1/oauth/token
          scopes: {}
    password_grant:
      type: oauth2
      description: First party apps only.
      flows:
        password:
          tokenUrl: http://localhost:8000/api/v1/oauth/token
          scopes:
            authenticate-user: Login, logout a user.
            confirm-email: Indicate that a user has verified their email.
            reset-password: Change a user's forgot password.
            validate-email: Check if a user account exists for given email.
x-tagGroups:
- name: Resources
  tags:
  - facility
  - module
  - permission
  - role
  - user
  - oauth
x-servers:
- url: //localhost:8000/api/v1
  description: Production server
- url: //localhost:9000/api/v1
  description: Sandbox server
